"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var react_1 = require("react");
var prop_types_1 = require("prop-types");
var Provider = /** @class */ (function (_super) {
    __extends(Provider, _super);
    function Provider(props, context) {
        var _this = _super.call(this, props, context) || this;
        if (!Provider.isReact16Plus) {
            _this.render = function () { return React.Children.only(_this.props.children); };
        }
        return _this;
    }
    Provider.prototype.componentWillReceiveProps = function () {
        // tslint:disable:no-console
        console.warn('Container can only be set once to <Provider> and therefore not be overridden.');
    };
    Provider.prototype.getChildContext = function () {
        var container = this.props.container;
        this.trySetParentContainer(container);
        return { container: container };
    };
    Provider.prototype.trySetParentContainer = function (container) {
        if (this.context.container && !container.parent) {
            container.parent = this.context.container;
        }
    };
    Provider.prototype.render = function () {
        return React.Children
            .toArray(this.props.children)
            .map(function (child, index) { return React.cloneElement(child, { key: index }); });
    };
    Provider.childContextTypes = {
        container: prop_types_1.object.isRequired,
    };
    Provider.contextTypes = { container: prop_types_1.object };
    Provider.isReact16Plus = parseFloat(React.version) >= 16;
    return Provider;
}(react_1.Component));
exports.Provider = Provider;
//# sourceMappingURL=Provider.js.map