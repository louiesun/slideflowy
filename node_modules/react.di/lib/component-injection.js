"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var prop_types_1 = require("prop-types");
function componentInject(target, propertyKey, identifier) {
    var type = Reflect.getMetadata('design:type', target, propertyKey);
    var isArrayType = type === Array;
    identifier = identifier || type;
    ensureContainerContextExists(target.constructor);
    setDependentProperty(target, propertyKey, identifier, isArrayType);
}
exports.componentInject = componentInject;
function setDependentProperty(target, propertyKey, identifier, isArrayType) {
    var GET_KEY = isArrayType ? 'getAll' : 'get';
    Object.defineProperty(target, propertyKey, {
        configurable: true,
        enumerable: true,
        get: function () {
            checkIfContainerExists(this);
            var value = this.context.container[GET_KEY](identifier);
            Object.defineProperty(this, propertyKey, { value: value });
            return value;
        },
        set: function (value) {
            Object.defineProperty(this, propertyKey, { value: value });
        }
    });
}
function checkIfContainerExists(component) {
    if (!component.context || !component.context.container) {
        throw new Error("Component \"" + component.constructor.name + "\" need to be nested in a Module or Provider Component" +
            " to use dependency injection.");
    }
}
function ensureContainerContextExists(componentClass) {
    if (!componentClass.contextTypes) {
        componentClass.contextTypes = {};
    }
    if (!componentClass.contextTypes.container) {
        componentClass.contextTypes.container = prop_types_1.object;
    }
}
//# sourceMappingURL=component-injection.js.map