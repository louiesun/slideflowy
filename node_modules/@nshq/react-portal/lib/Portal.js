"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Portal = void 0;
const React = __importStar(require("react"));
const ReactDOM = __importStar(require("react-dom"));
const shallowequal_1 = __importDefault(require("shallowequal"));
class Portal extends React.PureComponent {
    constructor() {
        super(...arguments);
        this._portalEl = document.createElement('div');
        /**
         * @deprecated
         */
        this.portal = this._portalEl;
        this._onClickDocument = (event) => {
            /* istanbul ignore next */
            if (!this.props.visible)
                return;
            if (this.props.clickClose(event)) {
                this.props.onVisibleChange(false, { event });
            }
        };
    }
    componentDidMount() {
        document.addEventListener('click', this._onClickDocument);
        this._updatePortalEl(null, this.props);
    }
    componentDidUpdate(prevProps) {
        this._updatePortalEl(prevProps, this.props);
    }
    componentWillUnmount() {
        document.removeEventListener('click', this._onClickDocument);
        this._updatePortalEl(this.props, null);
    }
    render() {
        if (this.props.parent) {
            return ReactDOM.createPortal(this.props.children, this._portalEl);
        }
        return (React.createElement("div", { className: this.props.className, style: Object.assign(Object.assign({}, this._getDisplayStyle(this.props.visible)), this.props.style) }, this.props.children));
    }
    _updatePortalEl(prevProps, nextProps) {
        const portalEl = this._portalEl;
        if (!prevProps || !nextProps || prevProps.parent !== nextProps.parent) {
            this._operateParent(prevProps, parent => parent === null || parent === void 0 ? void 0 : parent.removeChild(portalEl));
            this._operateParent(nextProps, parent => parent === null || parent === void 0 ? void 0 : parent.appendChild(portalEl));
        }
        if (nextProps) {
            if (!prevProps || prevProps.className !== nextProps.className) {
                portalEl.className = nextProps.className.trim() || '';
            }
            const prevStyle = prevProps && prevProps.style;
            const nextStyle = nextProps.style;
            if (!(0, shallowequal_1.default)(prevStyle, nextStyle)) {
                portalEl.style.cssText = '';
                Object.assign(portalEl.style, this._getDisplayStyle(nextProps.visible), nextStyle);
                Object.keys(nextStyle)
                    .filter(p => p.startsWith('--'))
                    .forEach(p => {
                    portalEl.style.setProperty(p, nextStyle[p]);
                });
            }
            else {
                if (nextProps.visible) {
                    portalEl.style.removeProperty('display');
                }
                else {
                    portalEl.style.display = 'none';
                }
            }
        }
    }
    _getDisplayStyle(visible) {
        if (visible) {
            return {};
        }
        else {
            return { display: 'none' };
        }
    }
    _operateParent(props, operator) {
        if (!props)
            return;
        if (typeof props.parent === 'function') {
            operator(props.parent());
        }
        else {
            operator(props.parent);
        }
    }
}
Portal.displayName = 'Portal';
Portal.defaultProps = {
    parent: () => document.body,
    className: '',
    style: {},
    visible: true,
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    onVisibleChange() { },
    clickClose(event) {
        /* istanbul ignore next */
        return event.button && event.button !== 0;
    },
};
exports.Portal = Portal;
